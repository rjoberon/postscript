%!PS-Adobe-2.0

% MacMahon's Cubes
%
% see https://www.jstor.org/stable/24955792
%
% Changelog:
% 2021-11-21 (rja):
% - initial version


% set page size to A4 landscape
<< /PageSize [842 595] >> setpagedevice

% define unit to be 1mm ((72 dots/inch) / (25.4 mm/inch))
/unit 72 25.4 div def

% initialisation
unit unit scale
1 setlinewidth
0 0 translate


% global parameters
/cubesize 20 def  % size of one cube
/ratio 0.5 def    % relative size of inner square
/gap 5 def        % gap between cubes

%         blue    green   lila      red     orange    yellow
/colors [[0 0 1] [0 1 0] [0.5 0 1] [1 0 0] [1 0.5 0] [1 1 0]] def

% bottom right top left center
/cubes [
    [[0 0 0 0 0] [1 2 5 3 4] [3 1 4 2 6] [5 4 2 1 3] [3 5 1 4 2] [2 3 4 5 1]]
    [[2 1 3 5 4] [0 0 0 0 0] [5 4 3 1 2] [6 2 5 4 1] [4 2 5 4 1] [1 4 2 5 3]]
    [[1 3 2 4 6] [4 5 1 3 2] [0 0 0 0 0] [1 3 6 2 5] [2 6 4 3 5] [3 4 1 6 5]]
    [[4 5 1 2 3] [2 6 4 5 1] [3 1 2 6 5] [0 0 0 0 0] [1 5 2 3 4] [4 1 3 5 2]]
    [[5 3 4 1 2] [5 4 2 3 1] [6 2 3 4 5] [5 1 3 2 4] [0 0 0 0 0] [1 2 4 3 5]]
    [[3 2 5 4 1] [4 1 5 2 3] [4 3 6 1 5] [1 4 5 3 2] [2 1 3 4 5] [0 0 0 0 0]]
] def


%                              _______
% input:  size [5 color ids]  |\     /|
% output: one cube, anchored  | \___/ |
%         at the bottom left  | |   | |
%                             | |_b_| |a
%                             | /   \ |
%                             |/_____\|
/drawcube {
    1 dict begin
        /col exch def        % colors
        /a exch def          % size (side length)
        /b a ratio mul def   % size of inner square
        /h a b sub 2 div def % height of trapezes

        % draw trapezes
        gsave
            0 0 moveto
            0 1 3 { % trapezes (bottom, right, top, left)
                col exch get a h drawtrapeze
                a 0 translate 90 rotate 0 0 moveto
            } for
            % inner square
            h h moveto
            b 0 rlineto
            0 b rlineto
            b neg 0 rlineto
            closepath
            col 4 get setcolor
            fill
        grestore
    end
} def


%
% draw one filled trapez           _________
% input: color width height       / ^       \
%                                /  | height \
%        (length of short side  /___V_________\
%         = width - 2height)          width
/drawtrapeze {
    1 dict begin
        /height exch def
        /width exch def
        /color exch def
        /short width height 2 mul sub def

        width      0          rlineto % bottom
        height neg height     rlineto % right
        short neg  0          rlineto % top
        height neg height neg rlineto % left
        closepath
        color setcolor
        fill
    end
} def


%
% set the color to colors[colid-1]
% input: colid
/setcolor { % colid
    1 sub   % colid-1
    colors  % colid-1 colors
    exch    % colors colid-1
    get     % colors[colid-1]         (=[r g b])
    aload   % r g b colors[colid-1]
    pop     % r g b
    setrgbcolor
} def


%
% draw all cubes
%
/drawcubes {
    gsave
        0 1 5 {            % row
            cubes exch get % cubes[row]
            gsave
            0 1 5 {        % cubes[row] col
                exch dup   % col cubes[row] cubes[row]
                3 -1 roll  % cubes[row] cubes[row] col
                get        % cubes[row] cubes[row][col]
                dup 0 get  % cubes[row] cubes[row][col] i
                0 ne       % cubes[row] cubes[row][col] i != 0
                {
                    cubesize exch drawcube   % regular cube
                } {
                    pop                      % white cube
                } ifelse
                cubesize gap add 0 translate % next column
            } for
            grestore
            0 cubesize gap add neg translate % next row
        } for
    grestore
} def


% start position
10 260 translate
drawcubes
